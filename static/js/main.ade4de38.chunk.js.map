{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","useEffect","setTimeout","time","trim","split","filter","word","length","calculateWordCount","className","ref","onChange","event","value","target","disabled","onClick","current","focus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAkEeA,MA/Df,WACE,IADa,EAGWC,mBAAS,IAHpB,mBAGNC,EAHM,KAGAC,EAHA,OAI6BF,mBAHrB,IADR,mBAING,EAJM,KAISC,EAJT,OAK6BJ,oBAAS,GALtC,mBAKNK,EALM,KAKSC,EALT,OAMqBN,mBAAS,GAN9B,mBAMNO,EANM,KAMKC,EANL,KAOPC,EAAaC,iBAAO,MAqC1B,OAZCC,qBAAU,WACJN,GAAiBF,EAAgB,EAClCS,YAAW,WACTR,GAAiB,SAAAS,GAAI,OAAIA,EAAM,OAC9B,KACuB,IAAlBV,IATXG,GAAiB,GACjBE,EAhBF,SAA4BP,GAE1B,OADiBA,EAAKa,OAAOC,MAAM,KACnBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,OAc/BC,CAAmBlB,OAW/B,CAACE,EAAeE,IAKlB,sBAAKe,UAAU,MAAf,UACE,wDACA,0BACIC,IAAKZ,EACLa,SAxCR,SAAuBC,GAAQ,IACtBC,EAASD,EAAME,OAAfD,MACPtB,EAAQsB,IAuCFA,MAAOvB,EACPyB,UAAWrB,IAEf,kDAAqBF,KACrB,wBACIwB,QArCP,WACErB,GAAiB,GACjBF,EAnBkB,IAoBlBF,EAAQ,IACRM,EAAa,GACbC,EAAWmB,QAAQF,UAAW,EAC9BjB,EAAWmB,QAAQC,SAgCdH,SAAUrB,EAFd,mBAGA,8CAAiBE,SChDRuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ade4de38.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\"\nimport './index.css';\n\nfunction App() {\n  const startingTime = 15\n\n  const [text, setText] = useState(\"\")\n  const [timeRemaining, setTimeRemaining] = useState(startingTime)\n  const [isTimeRunning, setIsTimeRunning] = useState(false)\n  const [wordCount, setWordCount] = useState(0)\n  const textBoxRef = useRef(null)\n\n  function handleChange (event) {\n    const {value} = event.target\n    setText(value)\n  }\n   function calculateWordCount(text){\n     const wordsArr = text.trim().split(\" \")\n     return wordsArr.filter(word => word !== \"\").length\n   }\n\n   function startGame() {\n     setIsTimeRunning(true)\n     setTimeRemaining(startingTime)\n     setText(\"\")\n     setWordCount(0)\n     textBoxRef.current.disabled = false\n     textBoxRef.current.focus()\n   }\n\n   function endGame() {\n     setIsTimeRunning(false)\n     setWordCount(calculateWordCount(text))\n   }\n\n   useEffect(() => {\n      if(isTimeRunning && timeRemaining > 0) {\n        setTimeout(() => {\n          setTimeRemaining(time => time -1)\n        }, 1000)\n      } else if(timeRemaining === 0) {\n        endGame()\n      }\n   }, [timeRemaining, isTimeRunning])\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>How fast can you type?</h1>\n      <textarea \n          ref={textBoxRef}\n          onChange={handleChange}\n          value={text}\n          disabled={!isTimeRunning}\n          />\n      <h1>Time remaining: {timeRemaining}</h1>\n      <button\n          onClick={startGame}\n          disabled={isTimeRunning}>Start</button>\n      <h1>Word count: {wordCount}</h1>\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}